export declare type AttestationType = {
    id: number;
    scoreWeight: number;
    nameFriendly: string;
    name?: string;
};
export declare enum AttestationTypeID {
    'phone' = 0,
    'email' = 1,
    'facebook' = 2,
    'sanction-screen' = 3,
    'pep-screen' = 4,
    'id-document' = 5,
    'google' = 6,
    'linkedin' = 7,
    'twitter' = 8,
    'payroll' = 9,
    'ssn' = 10,
    'criminal' = 11,
    'offense' = 12,
    'driving' = 13,
    'employment' = 14,
    'education' = 15,
    'drug' = 16,
    'bank' = 17,
    'utility' = 18,
    'income' = 19,
    'assets' = 20,
    'full-name' = 21,
    'birth-date' = 22,
    'gender' = 23,
    'group' = 24,
    'meta' = 25,
    'office' = 26,
    'credential' = 27,
    'medical' = 28,
    'biometric' = 29,
    'supplemental' = 30,
    'vouch' = 31,
    'audit' = 32,
    'address' = 33
}
export declare type AttestationTypeManifest = {
    [P in keyof typeof AttestationTypeID]: AttestationType;
};
export declare const AttestationTypes: AttestationTypeManifest;
export declare const AttestationTypesByID: any;
export declare type TAttestationTypeNames = keyof typeof AttestationTypeID;
export declare const AttestationTypeNames: string[];
export declare const AttestationTypeIDs: AttestationTypeID[];
export declare const getAttestationTypeAttrib: (typeId: AttestationTypeID, attrib: "id" | "scoreWeight" | "nameFriendly" | "name") => any;
export declare const getAttestationTypeStr: (typeId: AttestationTypeID) => any;
export declare const getBloomIDStrength: (typeId: AttestationTypeID) => any;
export declare const getFormattedName: (typeId: AttestationTypeID) => any;
export declare enum AttestationStatus {
    initial = "initial",
    ready = "ready",
    complete = "complete",
    rejected = "rejected"
}
//# sourceMappingURL=AttestationTypes.d.ts.map