import { Address } from '../address';
import { BlockHeaderResponse, BlockResponse, CallRequest, EstimateRequest, LogRequest, LogResponse, PartialTransactionRequest, Sync, TransactionReceipt, TransactionRequest, TransactionResponse } from '../formatters';
import { EthereumProvider } from '../providers/ethereum-provider';
import { Subscription } from '../subscriptions';
import { TransactionHash } from '../types';
import { Data, Quantity } from '../types';
import { Wallet } from '../wallet';
import { BlockHash, BlockType } from './block';
import { EthRequestPayloads } from './eth-request-payloads';
import { SendTx } from './send-tx';
import { SignedTransaction } from './signed-transaction';
export declare type TypedSigningData = {
    type: string;
    name: string;
    value: string;
}[];
export declare class Eth {
    readonly provider: EthereumProvider;
    readonly request: EthRequestPayloads;
    wallet?: Wallet;
    constructor(provider: EthereumProvider);
    static fromCurrentProvider(): Eth | undefined;
    defaultFromAddress: Address | undefined;
    private send;
    getId(): Promise<number>;
    getNodeInfo(): Promise<string>;
    getProtocolVersion(): Promise<string>;
    getCoinbase(): Promise<Address>;
    isMining(): Promise<boolean>;
    getHashrate(): Promise<number>;
    isSyncing(): Promise<Sync | boolean>;
    getGasPrice(): Promise<Quantity>;
    getAccounts(): Promise<Address[]>;
    getBlockNumber(): Promise<number>;
    getBalance(address: Address, block?: BlockType): Promise<Quantity>;
    getStorageAt(address: Address, position: string, block?: BlockType): Promise<Data>;
    getCode(address: Address, block?: BlockType): Promise<Data>;
    getBlock(block: BlockType | BlockHash, returnTransactionObjects?: boolean): Promise<BlockResponse>;
    getUncle(block: BlockType | BlockHash, uncleIndex: number, returnTransactionObjects?: boolean): Promise<BlockResponse>;
    getBlockTransactionCount(block: BlockType | BlockHash): Promise<number>;
    getBlockUncleCount(block: BlockType | BlockHash): Promise<number>;
    getTransaction(hash: TransactionHash): Promise<TransactionResponse>;
    getTransactionFromBlock(block: BlockType | BlockHash, index: number): Promise<TransactionResponse>;
    getTransactionReceipt(txHash: TransactionHash): Promise<TransactionReceipt | null>;
    getTransactionCount(address: Address, block?: BlockType): Promise<number>;
    signTransaction(tx: TransactionRequest): Promise<SignedTransaction>;
    sendSignedTransaction(data: Data): SendTx;
    sendTransaction(tx: PartialTransactionRequest): SendTx;
    private getAccount;
    sign(address: Address, dataToSign: Data): Promise<Data>;
    signTypedData(address: Address, dataToSign: TypedSigningData): Promise<Data>;
    call(tx: CallRequest, block?: BlockType): Promise<Data>;
    estimateGas(tx: EstimateRequest): Promise<number>;
    submitWork(nonce: string, powHash: string, digest: string): Promise<boolean>;
    getWork(): Promise<string[]>;
    getPastLogs(options: LogRequest): Promise<LogResponse[]>;
    subscribe(type: 'logs', options?: LogRequest): Subscription<LogResponse>;
    subscribe(type: 'syncing'): Subscription<object | boolean>;
    subscribe(type: 'newBlockHeaders'): Subscription<BlockHeaderResponse>;
    subscribe(type: 'pendingTransactions'): Subscription<TransactionResponse>;
}
