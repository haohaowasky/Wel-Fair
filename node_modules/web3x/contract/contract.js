"use strict";
/*
  This file is part of web3x.

  web3x is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3x is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3x.  If not, see <http://www.gnu.org/licenses/>.
*/
Object.defineProperty(exports, "__esModule", { value: true });
const formatters_1 = require("../formatters");
const subscriptions_1 = require("../subscriptions");
const tx_1 = require("./tx");
const tx_deploy_1 = require("./tx-deploy");
/**
 * Should be called to create new contract instance
 *
 * @method Contract
 * @constructor
 * @param {Array} jsonInterface
 * @param {String} address
 * @param {Object} options
 */
class Contract {
    constructor(eth, contractAbi, address, defaultOptions = {}) {
        this.eth = eth;
        this.contractAbi = contractAbi;
        this.address = address;
        this.methods = this.buildMethods();
        this.events = this.buildEvents();
        const { gasPrice, from, gas } = defaultOptions;
        this.options = {
            gas,
            gasPrice,
            from,
        };
    }
    deployBytecode(data, ...args) {
        return new tx_deploy_1.TxDeploy(this.eth, this.contractAbi.ctor, this.contractAbi, data, args, this.options, addr => (this.address = addr));
    }
    once(event, options, callback) {
        this.on(event, options, (err, res, sub) => {
            sub.unsubscribe();
            callback(err, res, sub);
        });
    }
    async getPastEvents(event, options = {}) {
        const logOptions = this.getLogOptions(event, options);
        const result = await this.eth.getPastLogs(logOptions);
        return result.map(log => this.contractAbi.decodeAnyEvent(log));
    }
    on(event, options = {}, callback) {
        const logOptions = this.getLogOptions(event, options);
        const { fromBlock, ...subLogOptions } = logOptions;
        const params = [formatters_1.toRawLogRequest(subLogOptions)];
        const subscription = new subscriptions_1.Subscription('eth', 'logs', params, this.eth.provider, (result, sub) => {
            const output = formatters_1.fromRawLogResponse(result);
            const eventLog = this.contractAbi.decodeAnyEvent(output);
            sub.emit(output.removed ? 'changed' : 'data', eventLog);
            if (callback) {
                callback(undefined, eventLog, sub);
            }
        }, false);
        subscription.on('error', err => {
            if (callback) {
                callback(err, undefined, subscription);
            }
        });
        if (fromBlock !== undefined) {
            this.eth
                .getPastLogs(logOptions)
                .then(logs => {
                logs.forEach(result => {
                    const output = this.contractAbi.decodeAnyEvent(result);
                    subscription.emit('data', output);
                });
                subscription.subscribe();
            })
                .catch(err => {
                subscription.emit('error', err);
            });
        }
        else {
            subscription.subscribe();
        }
        return subscription;
    }
    executorFactory(functions) {
        return (...args) => {
            if (!this.address) {
                throw new Error('No contract address.');
            }
            const firstMatchingOverload = functions.find(f => args.length === f.numArgs());
            if (!firstMatchingOverload) {
                throw new Error(`No matching method with ${args.length} arguments for ${functions[0].name}.`);
            }
            return new tx_1.Tx(this.eth, firstMatchingOverload, this.contractAbi, this.address, args, this.options);
        };
    }
    buildMethods() {
        const methods = {};
        this.contractAbi.functions.forEach(f => {
            const executor = this.executorFactory([f]);
            methods[f.asString()] = executor;
            methods[f.signature] = executor;
        });
        const grouped = this.contractAbi.functions.reduce((acc, method) => {
            const funcs = [...(acc[method.name] || []), method];
            return { ...acc, [method.name]: funcs };
        }, {});
        Object.entries(grouped).map(([name, funcs]) => {
            methods[name] = this.executorFactory(funcs);
        });
        return methods;
    }
    buildEvents() {
        const events = {};
        this.contractAbi.events.forEach(e => {
            const event = this.on.bind(this, e.signature);
            if (!events[e.name]) {
                events[e.name] = event;
            }
            events[e.asString()] = event;
            events[e.signature] = event;
        });
        events.allEvents = this.on.bind(this, 'allevents');
        return events;
    }
    getLogOptions(eventName = 'allevents', options) {
        if (!this.address) {
            throw new Error('No contract address.');
        }
        if (eventName.toLowerCase() === 'allevents') {
            return {
                ...options,
                address: this.address,
            };
        }
        const event = this.contractAbi.events.find(e => e.name === eventName || e.signature === '0x' + eventName.replace('0x', ''));
        if (!event) {
            throw new Error(`Event ${eventName} not found.`);
        }
        return {
            ...options,
            address: this.address,
            topics: event.getEventTopics(options.filter),
        };
    }
}
exports.Contract = Contract;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJhY3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29udHJhY3QvY29udHJhY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7RUFlRTs7QUFJRiw4Q0FBdUg7QUFDdkgsb0RBQWdEO0FBR2hELDZCQUFxQztBQUNyQywyQ0FBdUM7QUFpQ3ZDOzs7Ozs7OztHQVFHO0FBQ0gsTUFBYSxRQUFRO0lBS25CLFlBQ1UsR0FBUSxFQUNSLFdBQXdCLEVBQ3pCLE9BQWlCLEVBQ3hCLGlCQUFrQyxFQUFFO1FBSDVCLFFBQUcsR0FBSCxHQUFHLENBQUs7UUFDUixnQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQUN6QixZQUFPLEdBQVAsT0FBTyxDQUFVO1FBR3hCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ25DLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBRWpDLE1BQU0sRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxHQUFHLGNBQWMsQ0FBQztRQUMvQyxJQUFJLENBQUMsT0FBTyxHQUFHO1lBQ2IsR0FBRztZQUNILFFBQVE7WUFDUixJQUFJO1NBQ0wsQ0FBQztJQUNKLENBQUM7SUFFTSxjQUFjLENBQUMsSUFBVSxFQUFFLEdBQUcsSUFBVztRQUM5QyxPQUFPLElBQUksb0JBQVEsQ0FDakIsSUFBSSxDQUFDLEdBQUcsRUFDUixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUssRUFDdEIsSUFBSSxDQUFDLFdBQVcsRUFDaEIsSUFBSSxFQUNKLElBQUksRUFDSixJQUFJLENBQUMsT0FBTyxFQUNaLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxDQUM5QixDQUFDO0lBQ0osQ0FBQztJQVVNLElBQUksQ0FBQyxLQUFnQixFQUFFLE9BQW1CLEVBQUUsUUFBaUM7UUFD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