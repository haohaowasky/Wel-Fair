"use strict";
/*
  This file is part of web3x.

  web3x is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3x is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3x.  If not, see <http://www.gnu.org/licenses/>.
*/
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../utils");
const sent_deploy_contract_tx_1 = require("./sent-deploy-contract-tx");
class TxDeploy {
    constructor(eth, contractEntry, contractAbi, deployData, args = [], defaultOptions = {}, onDeployed) {
        this.eth = eth;
        this.contractEntry = contractEntry;
        this.contractAbi = contractAbi;
        this.deployData = deployData;
        this.args = args;
        this.defaultOptions = defaultOptions;
        this.onDeployed = onDeployed;
    }
    async estimateGas(options = {}) {
        return await this.eth.estimateGas(this.getTx(options));
    }
    send(options) {
        const tx = this.getTx(options);
        if (!this.contractEntry.payable && tx.value > 0) {
            throw new Error('Can not send value to non-payable constructor.');
        }
        const promise = this.eth.sendTransaction(tx).getTxHash();
        return new sent_deploy_contract_tx_1.SentDeployContractTx(this.eth, this.contractAbi, promise, this.onDeployed);
    }
    getSendRequestPayload(options) {
        return this.eth.request.sendTransaction(this.getTx(options));
    }
    getTx(options) {
        return {
            from: options.from || this.defaultOptions.from,
            gasPrice: options.gasPrice || this.defaultOptions.gasPrice,
            gas: options.gas || this.defaultOptions.gas,
            value: options.value,
            data: this.encodeABI(),
        };
    }
    encodeABI() {
        return utils_1.hexToBuffer(this.deployData + this.contractEntry.encodeParameters(this.args).replace('0x', ''));
    }
}
exports.TxDeploy = TxDeploy;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHgtZGVwbG95LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbnRyYWN0L3R4LWRlcGxveS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7OztFQWVFOztBQUlGLG9DQUF1QztBQUV2Qyx1RUFBaUU7QUFzQmpFLE1BQWEsUUFBUTtJQUNuQixZQUNVLEdBQVEsRUFDUixhQUFvQyxFQUNwQyxXQUF3QixFQUN4QixVQUFrQixFQUNsQixPQUFjLEVBQUUsRUFDaEIsaUJBQWlDLEVBQUUsRUFDbkMsVUFBc0M7UUFOdEMsUUFBRyxHQUFILEdBQUcsQ0FBSztRQUNSLGtCQUFhLEdBQWIsYUFBYSxDQUF1QjtRQUNwQyxnQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQUN4QixlQUFVLEdBQVYsVUFBVSxDQUFRO1FBQ2xCLFNBQUksR0FBSixJQUFJLENBQVk7UUFDaEIsbUJBQWMsR0FBZCxjQUFjLENBQXFCO1FBQ25DLGVBQVUsR0FBVixVQUFVLENBQTRCO0lBQzdDLENBQUM7SUFFRyxLQUFLLENBQUMsV0FBVyxDQUFDLFVBQTJCLEVBQUU7UUFDcEQsT0FBTyxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBRU0sSUFBSSxDQUFDLE9BQW9CO1FBQzlCLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFL0IsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxFQUFFO1lBQy9DLE1BQU0sSUFBSSxLQUFLLENBQUMsZ0RBQWdELENBQUMsQ0FBQztTQUNuRTtRQUVELE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBRXpELE9BQU8sSUFBSSw4Q0FBb0IsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxXQUFXLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUN4RixDQUFDO0lBRU0scUJBQXFCLENBQUMsT0FBb0I7UUFDL0MsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQy9ELENBQUM7SUFFTyxLQUFLLENBQUMsT0FBTztRQUNuQixPQUFPO1lBQ0wsSUFBSSxFQUFFLE9BQU8sQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJO1lBQzlDLFFBQVEsRUFBRSxPQUFPLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsUUFBUTtZQUMxRCxHQUFHLEVBQUUsT0FBTyxDQUFDLEdBQUcsSUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUc7WUFDM0MsS0FBSyxFQUFFLE9BQU8sQ0FBQyxLQUFLO1lBQ3BCLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFO1NBQ3ZCLENBQUM7SUFDSixDQUFDO0lBRU0sU0FBUztRQUNkLE9BQU8sbUJBQVcsQ0FBQyxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN6RyxDQUFDO0NBQ0Y7QUE1Q0QsNEJBNENDIn0=