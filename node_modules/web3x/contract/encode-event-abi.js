"use strict";
/*
  This file is part of web3x.

  web3x is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3x is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3x.  If not, see <http://www.gnu.org/licenses/>.
*/
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("util");
const formatters_1 = require("../formatters");
const abi_coder_1 = require("./abi-coder");
/**
 * Should be used to encode indexed params and options to one final object
 *
 * @method _encodeEventABI
 * @param {Object} event
 * @param {Object} options
 * @return {Object} everything combined together and encoded
 */
function encodeEventABI(event, address, options) {
    options = options || {};
    const filter = options.filter || {};
    const result = {};
    ['fromBlock', 'toBlock']
        .filter(f => {
        return options[f] !== undefined;
    })
        .forEach(f => {
        result[f] = formatters_1.inputBlockNumberFormatter(options[f]);
    });
    // use given topics
    if (util_1.isArray(options.topics)) {
        result.topics = options.topics;
        // create topics based on filter
    }
    else {
        result.topics = [];
        // add event signature
        if (event && !event.anonymous && event.name !== 'ALLEVENTS') {
            result.topics.push(event.signature);
        }
        // add event topics (indexed arguments)
        if (event.name !== 'ALLEVENTS') {
            const indexedTopics = event.inputs
                .filter(i => {
                return i.indexed === true;
            })
                .map(i => {
                const value = filter[i.name];
                if (!value) {
                    return null;
                }
                // TODO: https://github.com/ethereum/web3x/issues/344
                // TODO: deal properly with components
                if (util_1.isArray(value)) {
                    return value.map(v => {
                        return abi_coder_1.abiCoder.encodeParameter(i.type, v);
                    });
                }
                return abi_coder_1.abiCoder.encodeParameter(i.type, value);
            });
            result.topics = result.topics.concat(indexedTopics);
        }
        if (!result.topics.length) {
            delete result.topics;
        }
    }
    if (address) {
        result.address = address.toLowerCase();
    }
    return result;
}
exports.encodeEventABI = encodeEventABI;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5jb2RlLWV2ZW50LWFiaS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb250cmFjdC9lbmNvZGUtZXZlbnQtYWJpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7O0VBZUU7O0FBRUYsK0JBQStCO0FBQy9CLDhDQUEwRDtBQUMxRCwyQ0FBdUM7QUFFdkM7Ozs7Ozs7R0FPRztBQUNILFNBQWdCLGNBQWMsQ0FBQyxLQUFLLEVBQUUsT0FBZ0IsRUFBRSxPQUFRO0lBQzlELE9BQU8sR0FBRyxPQUFPLElBQUksRUFBRSxDQUFDO0lBQ3hCLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLElBQUksRUFBRSxDQUFDO0lBQ3BDLE1BQU0sTUFBTSxHQUFRLEVBQUUsQ0FBQztJQUV2QixDQUFDLFdBQVcsRUFBRSxTQUFTLENBQUM7U0FDckIsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFO1FBQ1YsT0FBTyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssU0FBUyxDQUFDO0lBQ2xDLENBQUMsQ0FBQztTQUNELE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRTtRQUNYLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxzQ0FBeUIsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNwRCxDQUFDLENBQUMsQ0FBQztJQUVMLG1CQUFtQjtJQUNuQixJQUFJLGNBQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUU7UUFDM0IsTUFBTSxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDO1FBRS9CLGdDQUFnQztLQUNqQztTQUFNO1FBQ0wsTUFBTSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7UUFFbkIsc0JBQXNCO1FBQ3RCLElBQUksS0FBSyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsSUFBSSxLQUFLLENBQUMsSUFBSSxLQUFLLFdBQVcsRUFBRTtZQUMzRCxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDckM7UUFFRCx1Q0FBdUM7UUFDdkMsSUFBSSxLQUFLLENBQUMsSUFBSSxLQUFLLFdBQVcsRUFBRTtZQUM5QixNQUFNLGFBQWEsR0FBRyxLQUFLLENBQUMsTUFBTTtpQkFDL0IsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUNWLE9BQU8sQ0FBQyxDQUFDLE9BQU8sS0FBSyxJQUFJLENBQUM7WUFDNUIsQ0FBQyxDQUFDO2lCQUNELEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDUCxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUM3QixJQUFJLENBQUMsS0FBSyxFQUFFO29CQUNWLE9BQU8sSUFBSSxDQUFDO2lCQUNiO2dCQUVELHFEQUFxRDtnQkFDckQsc0NBQXNDO2dCQUV0QyxJQUFJLGNBQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtvQkFDbEIsT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFO3dCQUNuQixPQUFPLG9CQUFRLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7b0JBQzdDLENBQUMsQ0FBQyxDQUFDO2lCQUNKO2dCQUNELE9BQU8sb0JBQVEsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztZQUNqRCxDQUFDLENBQUMsQ0FBQztZQUVMLE1BQU0sQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDckQ7UUFFRCxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUU7WUFDekIsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDO1NBQ3RCO0tBQ0Y7SUFFRCxJQUFJLE9BQU8sRUFBRTtRQUNYLE1BQU0sQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLFdBQVcsRUFBRSxDQUFDO0tBQ3hDO0lBRUQsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQztBQTlERCx3Q0E4REMifQ==