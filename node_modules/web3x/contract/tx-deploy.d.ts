/// <reference types="node" />
import { Address } from '../address';
import { Eth, SendTx } from '../eth';
import { ContractAbi, ContractFunctionEntry } from './abi';
import { TxSend } from './tx';
interface SendOptions {
    from?: Address;
    gasPrice?: string | number;
    gas?: number;
    value?: number | string;
}
interface EstimateOptions {
    from?: Address;
    gasPrice?: string;
    value?: number | string;
}
declare type DefaultOptions = {
    from?: Address;
    gasPrice?: string;
    gas?: number;
};
export declare class TxDeploy implements TxSend {
    private eth;
    private contractEntry;
    private contractAbi;
    private deployData;
    private args;
    private defaultOptions;
    private onDeployed;
    constructor(eth: Eth, contractEntry: ContractFunctionEntry, contractAbi: ContractAbi, deployData: string, args: any[], defaultOptions: DefaultOptions, onDeployed: (address: Address) => void);
    estimateGas(options?: EstimateOptions): Promise<number>;
    send(options: SendOptions): SendTx;
    getSendRequestPayload(options: SendOptions): {
        method: string;
        params: import("../formatters").RawTransactionRequest[];
        format: (result: any) => any;
    };
    private getTx;
    encodeABI(): Buffer;
}
export {};
