"use strict";
/*
  This file is part of web3x.

  web3x is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3x is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3x.  If not, see <http://www.gnu.org/licenses/>.
*/
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const got_1 = tslib_1.__importDefault(require("got"));
function getHost(net) {
    switch (net) {
        case 'mainnet':
            return 'etherscan.io';
        case 'kovan':
            return 'kovan.etherscan.io';
        default:
            throw new Error(`Unknown network ${net}`);
    }
}
function getApiHost(net) {
    switch (net) {
        case 'mainnet':
            return 'api.etherscan.io';
        case 'kovan':
            return 'api-kovan.etherscan.io';
        default:
            throw new Error(`Unknown network ${net}`);
    }
}
async function getAbi(net, address) {
    const host = getApiHost(net);
    const abiUrl = `http://${host}/api?module=contract&action=getabi&address=${address}&format=raw`;
    const response = await got_1.default(abiUrl, { json: true });
    return response.body;
}
async function getInitData(net, address) {
    const host = getHost(net);
    const response = (await got_1.default(`https://${host}/address/${address}`)).body;
    const initCodeMd = response.match(/<div id='verifiedbytecode2'>([0-9a-f]+)</);
    if (!initCodeMd) {
        return;
    }
    const initCode = '0x' + initCodeMd[1];
    const ctorParamsMd = response.match(/last bytes of the Contract Creation Code above.*?margin-top: 5px;'>([0-9a-f]+)</);
    if (ctorParamsMd) {
        const ctorParams = ctorParamsMd[1];
        if (!initCode.endsWith(ctorParams)) {
            throw new Error('Expected ctor params to be appended to end of init code.');
        }
        return initCode.slice(0, -ctorParams.length);
    }
    return initCode;
}
async function getFromEtherscan(net, address) {
    const abi = await getAbi(net, address);
    const initData = await getInitData(net, address);
    return { abi, initData };
}
exports.getFromEtherscan = getFromEtherscan;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic291cmNlLWV0aGVyc2Nhbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb2RlZ2VuL3NvdXJjZXMvc291cmNlLWV0aGVyc2Nhbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7OztFQWVFOzs7QUFFRixzREFBc0I7QUFHdEIsU0FBUyxPQUFPLENBQUMsR0FBVztJQUMxQixRQUFRLEdBQUcsRUFBRTtRQUNYLEtBQUssU0FBUztZQUNaLE9BQU8sY0FBYyxDQUFDO1FBQ3hCLEtBQUssT0FBTztZQUNWLE9BQU8sb0JBQW9CLENBQUM7UUFDOUI7WUFDRSxNQUFNLElBQUksS0FBSyxDQUFDLG1CQUFtQixHQUFHLEVBQUUsQ0FBQyxDQUFDO0tBQzdDO0FBQ0gsQ0FBQztBQUVELFNBQVMsVUFBVSxDQUFDLEdBQVc7SUFDN0IsUUFBUSxHQUFHLEVBQUU7UUFDWCxLQUFLLFNBQVM7WUFDWixPQUFPLGtCQUFrQixDQUFDO1FBQzVCLEtBQUssT0FBTztZQUNWLE9BQU8sd0JBQXdCLENBQUM7UUFDbEM7WUFDRSxNQUFNLElBQUksS0FBSyxDQUFDLG1CQUFtQixHQUFHLEVBQUUsQ0FBQyxDQUFDO0tBQzdDO0FBQ0gsQ0FBQztBQUVELEtBQUssVUFBVSxNQUFNLENBQUMsR0FBVyxFQUFFLE9BQWU7SUFDaEQsTUFBTSxJQUFJLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzdCLE1BQU0sTUFBTSxHQUFHLFVBQVUsSUFBSSw4Q0FBOEMsT0FBTyxhQUFhLENBQUM7SUFDaEcsTUFBTSxRQUFRLEdBQUcsTUFBTSxhQUFHLENBQUMsTUFBTSxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFDbkQsT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDO0FBQ3ZCLENBQUM7QUFFRCxLQUFLLFVBQVUsV0FBVyxDQUFDLEdBQVcsRUFBRSxPQUFlO0lBQ3JELE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUMxQixNQUFNLFFBQVEsR0FBVyxDQUFDLE1BQU0sYUFBRyxDQUFDLFdBQVcsSUFBSSxZQUFZLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDaEYsTUFBTSxVQUFVLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQywwQ0FBMEMsQ0FBQyxDQUFDO0lBRTlFLElBQUksQ0FBQyxVQUFVLEVBQUU7UUFDZixPQUFPO0tBQ1I7SUFFRCxNQUFNLFFBQVEsR0FBRyxJQUFJLEdBQUcsVUFBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXZDLE1BQU0sWUFBWSxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQ2pDLGlGQUFpRixDQUNsRixDQUFDO0lBRUYsSUFBSSxZQUFZLEVBQUU7UUFDaEIsTUFBTSxVQUFVLEdBQUcsWUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3BDLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQ2xDLE1BQU0sSUFBSSxLQUFLLENBQUMsMERBQTBELENBQUMsQ0FBQztTQUM3RTtRQUNELE9BQU8sUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDOUM7SUFFRCxPQUFPLFFBQVEsQ0FBQztBQUNsQixDQUFDO0FBRU0sS0FBSyxVQUFVLGdCQUFnQixDQUFDLEdBQVcsRUFBRSxPQUFlO0lBQ2pFLE1BQU0sR0FBRyxHQUFHLE1BQU0sTUFBTSxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUN2QyxNQUFNLFFBQVEsR0FBRyxNQUFNLFdBQVcsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFFakQsT0FBTyxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsQ0FBQztBQUMzQixDQUFDO0FBTEQsNENBS0MifQ==