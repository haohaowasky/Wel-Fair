import { Address } from '../address';
import { TransactionRequest } from '../formatters';
import { EthereumProvider } from '../providers/ethereum-provider';
import { Data, Quantity, TransactionHash } from '../types';
import { PersonalRequestPayloads } from './personal-request-payloads';
export interface Transaction extends TransactionRequest {
    condition?: {
        block: number;
    } | {
        time: number;
    } | null;
}
export interface SignedTransaction {
    raw: Data;
    tx: Transaction;
}
export declare class Personal {
    private provider;
    readonly request: PersonalRequestPayloads;
    constructor(provider: EthereumProvider);
    private send;
    getAccounts(): Promise<Address[]>;
    newAccount(password: string): Promise<Address>;
    unlockAccount(address: Address, password: string, duration: Quantity): Promise<boolean>;
    lockAccount(address: Address): Promise<any>;
    importRawKey(privateKey: Data, password: string): Promise<Address>;
    sendTransaction(tx: Transaction, password: string): Promise<TransactionHash>;
    signTransaction(tx: Transaction, password: string): Promise<SignedTransaction>;
    sign(data: Data, address: Address, password: string): Promise<Data>;
    ecRecover(data: Data, signedData: Data): Promise<Address>;
}
