"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const bigint_buffer_1 = require("bigint-buffer");
const rlp = tslib_1.__importStar(require("rlp"));
const address_1 = require("../../address");
const formatters_1 = require("../../formatters");
const utils_1 = require("../../utils");
const tx_1 = require("../tx");
async function handleGetTransactionReceipt(blockchain, transactionHash) {
    const txHash = utils_1.hexToBuffer(transactionHash);
    const receipt = await blockchain.getTransactionReceipt(txHash);
    if (!receipt) {
        return null;
    }
    const tx = await blockchain.getMinedTransaction(txHash);
    const { to, nonce } = tx;
    // TODO: Store from in tx so no need to recover? This is slow.
    const from = tx_1.recoverTransaction(tx);
    const { cumulativeGasUsed, logs, status } = receipt;
    const receiptLogs = logs.map((log, logIndex) => ({
        id: null,
        removed: false,
        logIndex,
        blockNumber: 0,
        blockHash: '0',
        transactionHash,
        transactionIndex: 0,
        address: log.address,
        data: utils_1.bufferToHex(log.data),
        topics: log.topics.map(utils_1.bufferToHex),
    }));
    const txReceipt = {
        transactionHash,
        transactionIndex: 0,
        blockHash: '0',
        blockNumber: 0,
        from,
        to,
        cumulativeGasUsed: Number(cumulativeGasUsed),
        gasUsed: Number(cumulativeGasUsed),
        contractAddress: !to ? getContractAddress(from, nonce) : undefined,
        logs: receiptLogs,
        status,
    };
    return formatters_1.toRawTransactionReceipt(txReceipt);
}
exports.handleGetTransactionReceipt = handleGetTransactionReceipt;
function getContractAddress(from, nonce) {
    return new address_1.Address(utils_1.sha3Buffer(rlp.encode([from.toBuffer(), bigint_buffer_1.toBufferBE(nonce, 32)])).slice(12));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFuZGxlLWdldC10cmFuc2FjdGlvbi1yZWNlaXB0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2V2bS9wcm92aWRlci9oYW5kbGUtZ2V0LXRyYW5zYWN0aW9uLXJlY2VpcHQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsaURBQTJDO0FBQzNDLGlEQUEyQjtBQUMzQiwyQ0FBd0M7QUFDeEMsaURBQWtGO0FBRWxGLHVDQUFtRTtBQUVuRSw4QkFBMkM7QUFFcEMsS0FBSyxVQUFVLDJCQUEyQixDQUMvQyxVQUFzQixFQUN0QixlQUFnQztJQUVoQyxNQUFNLE1BQU0sR0FBRyxtQkFBVyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQzVDLE1BQU0sT0FBTyxHQUFHLE1BQU0sVUFBVSxDQUFDLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRS9ELElBQUksQ0FBQyxPQUFPLEVBQUU7UUFDWixPQUFPLElBQUksQ0FBQztLQUNiO0lBRUQsTUFBTSxFQUFFLEdBQUcsTUFBTSxVQUFVLENBQUMsbUJBQW1CLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDeEQsTUFBTSxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUM7SUFDekIsOERBQThEO0lBQzlELE1BQU0sSUFBSSxHQUFHLHVCQUFrQixDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRXBDLE1BQU0sRUFBRSxpQkFBaUIsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDO0lBRXBELE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQy9DLEVBQUUsRUFBRSxJQUFJO1FBQ1IsT0FBTyxFQUFFLEtBQUs7UUFDZCxRQUFRO1FBQ1IsV0FBVyxFQUFFLENBQUM7UUFDZCxTQUFTLEVBQUUsR0FBRztRQUNkLGVBQWU7UUFDZixnQkFBZ0IsRUFBRSxDQUFDO1FBQ25CLE9BQU8sRUFBRSxHQUFHLENBQUMsT0FBTztRQUNwQixJQUFJLEVBQUUsbUJBQVcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDO1FBQzNCLE1BQU0sRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxtQkFBVyxDQUFDO0tBQ3BDLENBQUMsQ0FBQyxDQUFDO0lBRUosTUFBTSxTQUFTLEdBQUc7UUFDaEIsZUFBZTtRQUNmLGdCQUFnQixFQUFFLENBQUM7UUFDbkIsU0FBUyxFQUFFLEdBQUc7UUFDZCxXQUFXLEVBQUUsQ0FBQztRQUNkLElBQUk7UUFDSixFQUFFO1FBQ0YsaUJBQWlCLEVBQUUsTUFBTSxDQUFDLGlCQUFpQixDQUFDO1FBQzVDLE9BQU8sRUFBRSxNQUFNLENBQUMsaUJBQWlCLENBQUM7UUFDbEMsZUFBZSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVM7UUFDbEUsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTTtLQUNQLENBQUM7SUFFRixPQUFPLG9DQUF1QixDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQzVDLENBQUM7QUE5Q0Qsa0VBOENDO0FBRUQsU0FBUyxrQkFBa0IsQ0FBQyxJQUFhLEVBQUUsS0FBYTtJQUN0RCxPQUFPLElBQUksaUJBQU8sQ0FBQyxrQkFBVSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsMEJBQVUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDakcsQ0FBQyJ9