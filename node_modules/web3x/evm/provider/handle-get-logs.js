"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("util");
const utils_1 = require("../../utils");
async function getLogs(blockchain, logRequest) {
    const { toBlock, fromBlock, address, topics } = logRequest;
    const chainTip = await blockchain.getChaintip();
    const toBlockNum = toBlock !== undefined ? blockTypeToNumber(toBlock, chainTip) : chainTip.number;
    const fromBlockNum = fromBlock !== undefined ? blockTypeToNumber(fromBlock, chainTip) : chainTip.number;
    const addresses = address ? (util_1.isArray(address) ? address : [address]) : [];
    const result = await blockchain.getLogs(addresses, topicsToBuffers(topics), fromBlockNum, toBlockNum);
    return result.map(({ block, blockHash, transactionIndex, transactionHash, log: { address, data, topics } }) => ({
        id: null,
        removed: false,
        logIndex: 0,
        blockNumber: block.number,
        blockHash: utils_1.bufferToHex(blockHash),
        transactionHash: utils_1.bufferToHex(transactionHash),
        transactionIndex,
        address,
        data: utils_1.bufferToHex(data),
        topics: topics.map(utils_1.bufferToHex),
    }));
}
exports.getLogs = getLogs;
function blockTypeToNumber(block, chainTip) {
    switch (block) {
        case 'genesis':
            return 0;
        case 'latest':
            return chainTip.number;
        case 'pending':
            throw new Error('Pending block type not supported.');
        default:
            return block;
    }
}
function topicsToBuffers(topics) {
    return topics.map(topic => {
        if (topic === null) {
            return null;
        }
        topic = util_1.isArray(topic) ? topic : [topic];
        return topic.map(utils_1.hexToBuffer);
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFuZGxlLWdldC1sb2dzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2V2bS9wcm92aWRlci9oYW5kbGUtZ2V0LWxvZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwrQkFBK0I7QUFHL0IsdUNBQXVEO0FBR2hELEtBQUssVUFBVSxPQUFPLENBQUMsVUFBc0IsRUFBRSxVQUFzQjtJQUMxRSxNQUFNLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLEdBQUcsVUFBVSxDQUFDO0lBRTNELE1BQU0sUUFBUSxHQUFHLE1BQU0sVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ2hELE1BQU0sVUFBVSxHQUFHLE9BQU8sS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQztJQUNsRyxNQUFNLFlBQVksR0FBRyxTQUFTLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7SUFDeEcsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLGNBQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUMxRSxNQUFNLE1BQU0sR0FBRyxNQUFNLFVBQVUsQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLGVBQWUsQ0FBQyxNQUFPLENBQUMsRUFBRSxZQUFZLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFFdkcsT0FBTyxNQUFNLENBQUMsR0FBRyxDQUNmLENBQUMsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLGdCQUFnQixFQUFFLGVBQWUsRUFBRSxHQUFHLEVBQUUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUMxRixDQUFDO1FBQ0MsRUFBRSxFQUFFLElBQUk7UUFDUixPQUFPLEVBQUUsS0FBSztRQUNkLFFBQVEsRUFBRSxDQUFDO1FBQ1gsV0FBVyxFQUFFLEtBQUssQ0FBQyxNQUFNO1FBQ3pCLFNBQVMsRUFBRSxtQkFBVyxDQUFDLFNBQVMsQ0FBQztRQUNqQyxlQUFlLEVBQUUsbUJBQVcsQ0FBQyxlQUFlLENBQUM7UUFDN0MsZ0JBQWdCO1FBQ2hCLE9BQU87UUFDUCxJQUFJLEVBQUUsbUJBQVcsQ0FBQyxJQUFJLENBQUM7UUFDdkIsTUFBTSxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsbUJBQVcsQ0FBQztLQUNoQixDQUFBLENBQ3BCLENBQUM7QUFDSixDQUFDO0FBeEJELDBCQXdCQztBQUVELFNBQVMsaUJBQWlCLENBQUMsS0FBZ0IsRUFBRSxRQUFxQjtJQUNoRSxRQUFRLEtBQUssRUFBRTtRQUNiLEtBQUssU0FBUztZQUNaLE9BQU8sQ0FBQyxDQUFDO1FBQ1gsS0FBSyxRQUFRO1lBQ1gsT0FBTyxRQUFRLENBQUMsTUFBTSxDQUFDO1FBQ3pCLEtBQUssU0FBUztZQUNaLE1BQU0sSUFBSSxLQUFLLENBQUMsbUNBQW1DLENBQUMsQ0FBQztRQUN2RDtZQUNFLE9BQU8sS0FBSyxDQUFDO0tBQ2hCO0FBQ0gsQ0FBQztBQUVELFNBQVMsZUFBZSxDQUFDLE1BQW9DO0lBQzNELE9BQU8sTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUN4QixJQUFJLEtBQUssS0FBSyxJQUFJLEVBQUU7WUFDbEIsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUNELEtBQUssR0FBRyxjQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN6QyxPQUFPLEtBQUssQ0FBQyxHQUFHLENBQUMsbUJBQVcsQ0FBQyxDQUFDO0lBQ2hDLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyJ9