/// <reference types="node" />
import { EventEmitter } from 'events';
import { LevelUp } from 'levelup';
import { EthereumProvider, EthereumProviderNotifications } from '../../providers';
import { Wallet } from '../../wallet';
import { Blockchain } from '../blockchain';
import { WorldState } from '../world';
export interface EvmProviderOptions {
    blockDelay?: number;
}
export declare class EvmProvider extends EventEmitter implements EthereumProvider {
    readonly worldState: WorldState;
    private readonly blockchain;
    private options;
    wallet?: Wallet;
    private subscriptions;
    private nextSubscriptionId;
    constructor(worldState: WorldState, blockchain: Blockchain, options?: EvmProviderOptions);
    static fromEvmProvider(provider: EvmProvider, options?: EvmProviderOptions): EvmProvider;
    static fromDb(db: LevelUp, options?: EvmProviderOptions): Promise<EvmProvider>;
    static fromLocalDb(name: string, options?: EvmProviderOptions): Promise<EvmProvider>;
    static eraseLocalDb(name: string): Promise<{}>;
    send(method: string, params?: any[] | undefined): Promise<any>;
    private subscribe;
    private unsubscribe;
    private handleLogs;
    private handleNewHead;
    on(notification: 'notification', listener: (result: any) => void): this;
    on(notification: 'connect', listener: () => void): this;
    on(notification: 'close', listener: (code: number, reason: string) => void): this;
    on(notification: 'networkChanged', listener: (networkId: string) => void): this;
    on(notification: 'accountsChanged', listener: (accounts: string[]) => void): this;
    removeListener(notification: 'notification', listener: (result: any) => void): this;
    removeListener(notification: 'connect', listener: () => void): this;
    removeListener(notification: 'close', listener: (code: number, reason: string) => void): this;
    removeListener(notification: 'networkChanged', listener: (networkId: string) => void): this;
    removeListener(notification: 'accountsChanged', listener: (accounts: string[]) => void): this;
    removeAllListeners(notification: EthereumProviderNotifications): any;
}
