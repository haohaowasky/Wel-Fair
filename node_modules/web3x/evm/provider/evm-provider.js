"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const bigint_buffer_1 = require("bigint-buffer");
const events_1 = require("events");
const levelup_1 = tslib_1.__importDefault(require("levelup"));
const address_1 = require("../../address");
const formatters_1 = require("../../formatters");
const utils_1 = require("../../utils");
const blockchain_1 = require("../blockchain");
const vm_1 = require("../vm");
const world_1 = require("../world");
const handle_call_1 = require("./handle-call");
const handle_get_logs_1 = require("./handle-get-logs");
const handle_get_transaction_receipt_1 = require("./handle-get-transaction-receipt");
const handle_send_transaction_1 = require("./handle-send-transaction");
class EvmProvider extends events_1.EventEmitter {
    constructor(worldState, blockchain, options = {}) {
        super();
        this.worldState = worldState;
        this.blockchain = blockchain;
        this.options = options;
        this.subscriptions = {};
        this.nextSubscriptionId = 0;
    }
    static fromEvmProvider(provider, options) {
        return new EvmProvider(provider.worldState, provider.blockchain, options);
    }
    static async fromDb(db, options) {
        const worldState = await world_1.WorldState.fromDb(db);
        const blockchain = await blockchain_1.Blockchain.fromDb(db);
        return new EvmProvider(worldState, blockchain, options);
    }
    static async fromLocalDb(name, options) {
        const leveljs = require('level-js');
        return await EvmProvider.fromDb(levelup_1.default(leveljs(name)), options);
    }
    static async eraseLocalDb(name) {
        return new Promise((resolve, reject) => {
            const req = indexedDB.deleteDatabase(`level-js-${name}`);
            req.onsuccess = resolve;
            req.onerror = reject;
            req.onblocked = reject;
        });
    }
    async send(method, params) {
        // console.log(method);
        // console.log(params);
        switch (method) {
            case 'eth_gasPrice':
                return utils_1.numberToHex(50000);
        }
        if (!params || !params[0]) {
            throw new Error();
        }
        switch (method) {
            case 'eth_sendTransaction':
                if (!this.wallet) {
                    throw new Error('No wallet available for signing transactions.');
                }
                return await handle_send_transaction_1.handleSendTransaction(this.worldState, this.blockchain, formatters_1.fromRawTransactionRequest(params[0]), this.wallet, this.options.blockDelay);
            case 'eth_call':
                return utils_1.bufferToHex(await handle_call_1.handleCall(this.worldState, formatters_1.fromRawCallRequest(params[0])));
            case 'eth_getTransactionReceipt':
                return await handle_get_transaction_receipt_1.handleGetTransactionReceipt(this.blockchain, params[0]);
            case 'eth_getCode':
                return utils_1.bufferToHex(await vm_1.getAccountCode(this.worldState, address_1.Address.fromString(params[0])));
            case 'eth_getLogs':
                return (await handle_get_logs_1.getLogs(this.blockchain, formatters_1.fromRawLogRequest(params[0]))).map(formatters_1.toRawLogResponse);
            case 'eth_subscribe':
                return utils_1.numberToHex(this.subscribe(params[0], params[1]));
            case 'eth_unsubscribe':
                return this.unsubscribe(params[0]);
        }
    }
    subscribe(event, params) {
        const id = utils_1.numberToHex(this.nextSubscriptionId++);
        if (event === 'logs') {
            const listener = logs => this.handleLogs(id, logs);
            this.blockchain.on('logs', listener);
            this.subscriptions[id] = { event, params, listener };
        }
        if (event === 'newHeads') {
            const listener = (block, hash) => this.handleNewHead(id, block, hash);
            this.blockchain.on('newHeads', listener);
            this.subscriptions[id] = { event, params, listener };
        }
        return id;
    }
    unsubscribe(id) {
        const sub = this.subscriptions[id];
        if (!sub) {
            return false;
        }
        delete this.subscriptions[id];
        this.blockchain.removeListener(sub.event, sub.listener);
        return true;
    }
    handleLogs(subscription, logResponse) {
        this.emit('notification', { subscription, result: formatters_1.toRawLogResponse(logResponse) });
    }
    handleNewHead(subscription, block, hash) {
        const blockResponse = {
            hash,
            ...block,
            difficulty: block.difficulty.toString(),
            gasLimit: Number(block.gasLimit),
            gasUsed: Number(block.gasUsed),
            nonce: bigint_buffer_1.toBufferBE(BigInt(block.nonce), 8),
        };
        this.emit('notification', { subscription, result: formatters_1.toRawBlockHeaderResponse(blockResponse) });
    }
    on(notification, listener) {
        return super.on(notification, listener);
    }
    removeListener(notification, listener) {
        return super.removeListener(notification, listener);
    }
    removeAllListeners(notification) {
        return super.removeAllListeners(notification);
    }
}
exports.EvmProvider = EvmProvider;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZtLXByb3ZpZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2V2bS9wcm92aWRlci9ldm0tcHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsaURBQTJDO0FBQzNDLG1DQUFzQztBQUN0Qyw4REFBMkM7QUFDM0MsMkNBQXdDO0FBQ3hDLGlEQVEwQjtBQUUxQix1Q0FBdUQ7QUFFdkQsOENBQXdEO0FBQ3hELDhCQUF1QztBQUN2QyxvQ0FBc0M7QUFDdEMsK0NBQTJDO0FBQzNDLHVEQUE0QztBQUM1QyxxRkFBK0U7QUFDL0UsdUVBQWtFO0FBTWxFLE1BQWEsV0FBWSxTQUFRLHFCQUFZO0lBSzNDLFlBQ2tCLFVBQXNCLEVBQ3JCLFVBQXNCLEVBQy9CLFVBQThCLEVBQUU7UUFFeEMsS0FBSyxFQUFFLENBQUM7UUFKUSxlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQ3JCLGVBQVUsR0FBVixVQUFVLENBQVk7UUFDL0IsWUFBTyxHQUFQLE9BQU8sQ0FBeUI7UUFObEMsa0JBQWEsR0FBMEIsRUFBRSxDQUFDO1FBQzFDLHVCQUFrQixHQUFHLENBQUMsQ0FBQztJQVEvQixDQUFDO0lBRU0sTUFBTSxDQUFDLGVBQWUsQ0FBQyxRQUFxQixFQUFFLE9BQTRCO1FBQy9FLE9BQU8sSUFBSSxXQUFXLENBQUMsUUFBUSxDQUFDLFVBQVUsRUFBRSxRQUFRLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQzVFLENBQUM7SUFFTSxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFXLEVBQUUsT0FBNEI7UUFDbEUsTUFBTSxVQUFVLEdBQUcsTUFBTSxrQkFBVSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUMvQyxNQUFNLFVBQVUsR0FBRyxNQUFNLHVCQUFVLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQy9DLE9BQU8sSUFBSSxXQUFXLENBQUMsVUFBVSxFQUFFLFVBQVUsRUFBRSxP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