"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sign_transaction_1 = require("../../account/sign-transaction");
const utils_1 = require("../../utils");
const tx_1 = require("../tx");
const vm_1 = require("../vm");
async function handleSendTransaction(worldState, blockchain, txRequest, wallet, blockDelay = 0) {
    const { from, to, gas = 200000, gasPrice, value = 0, data } = txRequest;
    const nonce = txRequest.nonce ? BigInt(txRequest.nonce) : await worldState.getTransactionCount(from);
    const fromAccount = wallet.get(from);
    if (!fromAccount) {
        throw new Error(`Unknown address: ${from}`);
    }
    const signTxRequest = {
        chainId: 1,
        to,
        gas,
        gasPrice,
        value,
        data,
        nonce: nonce.toString(),
    };
    // TODO: Move sign function somewhere better (out of account module)?
    const { v, r, s } = sign_transaction_1.sign(signTxRequest, fromAccount.privateKey);
    const tx = {
        nonce,
        to,
        dataOrInit: data,
        gasPrice: BigInt(gasPrice),
        gasLimit: BigInt(gas),
        value: BigInt(value),
        v,
        r,
        s,
    };
    const txHash = utils_1.sha3(tx_1.serializeTx(tx));
    setTimeout(async () => {
        const result = await vm_1.executeTransaction(worldState, tx, from);
        const receipt = {
            cumulativeGasUsed: BigInt(gas) - result.remainingGas,
            logs: result.txSubstrate.logs,
            logsBloomFilter: Buffer.of(),
            status: result.status,
        };
        await blockchain.mineTransactions(await worldState.getStateRoot(), [tx], [receipt]);
    }, blockDelay);
    return txHash;
}
exports.handleSendTransaction = handleSendTransaction;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFuZGxlLXNlbmQtdHJhbnNhY3Rpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZXZtL3Byb3ZpZGVyL2hhbmRsZS1zZW5kLXRyYW5zYWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEscUVBQXNEO0FBR3RELHVDQUFnRDtBQUdoRCw4QkFBbUQ7QUFDbkQsOEJBQTJDO0FBR3BDLEtBQUssVUFBVSxxQkFBcUIsQ0FDekMsVUFBc0IsRUFDdEIsVUFBc0IsRUFDdEIsU0FBNkIsRUFDN0IsTUFBYyxFQUNkLGFBQXFCLENBQUM7SUFFdEIsTUFBTSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsR0FBRyxHQUFHLE1BQU0sRUFBRSxRQUFRLEVBQUUsS0FBSyxHQUFHLENBQUMsRUFBRSxJQUFJLEVBQUUsR0FBRyxTQUFTLENBQUM7SUFDeEUsTUFBTSxLQUFLLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxVQUFVLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFckcsTUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNyQyxJQUFJLENBQUMsV0FBVyxFQUFFO1FBQ2hCLE1BQU0sSUFBSSxLQUFLLENBQUMsb0JBQW9CLElBQUksRUFBRSxDQUFDLENBQUM7S0FDN0M7SUFFRCxNQUFNLGFBQWEsR0FBRztRQUNwQixPQUFPLEVBQUUsQ0FBQztRQUNWLEVBQUU7UUFDRixHQUFHO1FBQ0gsUUFBUTtRQUNSLEtBQUs7UUFDTCxJQUFJO1FBQ0osS0FBSyxFQUFFLEtBQUssQ0FBQyxRQUFRLEVBQUU7S0FDeEIsQ0FBQztJQUVGLHFFQUFxRTtJQUNyRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyx1QkFBSSxDQUFDLGFBQWEsRUFBRSxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUM7SUFFaEUsTUFBTSxFQUFFLEdBQU87UUFDYixLQUFLO1FBQ0wsRUFBRTtRQUNGLFVBQVUsRUFBRSxJQUFLO1FBQ2pCLFFBQVEsRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDO1FBQzFCLFFBQVEsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDO1FBQ3JCLEtBQUssRUFBRSxNQUFNLENBQUMsS0FBSyxDQUFDO1FBQ3BCLENBQUM7UUFDRCxDQUFDO1FBQ0QsQ0FBQztLQUNGLENBQUM7SUFFRixNQUFNLE1BQU0sR0FBRyxZQUFJLENBQUMsZ0JBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBRXJDLFVBQVUsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUNwQixNQUFNLE1BQU0sR0FBRyxNQUFNLHVCQUFrQixDQUFDLFVBQVUsRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFOUQsTUFBTSxPQUFPLEdBQWM7WUFDekIsaUJBQWlCLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxZQUFZO1lBQ3BELElBQUksRUFBRSxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUk7WUFDN0IsZUFBZSxFQUFFLE1BQU0sQ0FBQyxFQUFFLEVBQUU7WUFDNUIsTUFBTSxFQUFFLE1BQU0sQ0FBQyxNQUFNO1NBQ3RCLENBQUM7UUFFRixNQUFNLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLFVBQVUsQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUN0RixDQUFDLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFFZixPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDO0FBeERELHNEQXdEQyJ9