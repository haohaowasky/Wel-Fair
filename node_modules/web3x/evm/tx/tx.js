"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const bigint_buffer_1 = require("bigint-buffer");
const rlp = tslib_1.__importStar(require("rlp"));
const address_1 = require("../../address");
const account_1 = tslib_1.__importDefault(require("../../eth-lib/account"));
const bytes_1 = tslib_1.__importDefault(require("../../eth-lib/bytes"));
const utils_1 = require("../../utils");
function serializeTx(tx) {
    const { nonce, gasPrice, gasLimit, to, value, dataOrInit, v, r, s } = tx;
    return rlp.encode([
        bigint_buffer_1.toBufferBE(nonce, 32),
        bigint_buffer_1.toBufferBE(gasPrice, 32),
        bigint_buffer_1.toBufferBE(gasLimit, 32),
        to ? to.toBuffer() : Buffer.of(),
        bigint_buffer_1.toBufferBE(value, 32),
        dataOrInit,
        utils_1.hexToBuffer(v),
        utils_1.hexToBuffer(r),
        utils_1.hexToBuffer(s),
    ]);
}
exports.serializeTx = serializeTx;
function deserializeTx(data) {
    const bufs = rlp.decode(data);
    return {
        nonce: bigint_buffer_1.toBigIntBE(bufs[0]),
        gasPrice: bigint_buffer_1.toBigIntBE(bufs[1]),
        gasLimit: bigint_buffer_1.toBigIntBE(bufs[2]),
        to: bufs[3].length ? new address_1.Address(bufs[3]) : undefined,
        value: bigint_buffer_1.toBigIntBE(bufs[4]),
        dataOrInit: bufs[5],
        v: utils_1.bufferToHex(bufs[6]),
        r: utils_1.bufferToHex(bufs[7]),
        s: utils_1.bufferToHex(bufs[8]),
    };
}
exports.deserializeTx = deserializeTx;
const bigIntToHex = n => '0x' + n.toString(16);
function recoverTransaction(tx) {
    const { to, nonce, gasPrice, gasLimit, value, dataOrInit, v, r, s } = tx;
    const signature = bytes_1.default.flatten([bytes_1.default.pad(32, r), bytes_1.default.pad(32, s), v]);
    const recovery = Number(v);
    const extraData = recovery < 35 ? [] : [bytes_1.default.fromNumber((recovery - 35) >> 1), '0x', '0x'];
    const signingData = [
        bytes_1.default.fromNat(bigIntToHex(nonce)),
        bytes_1.default.fromNat(bigIntToHex(gasPrice)),
        bytes_1.default.fromNat(bigIntToHex(gasLimit)),
        to ? to.toString().toLowerCase() : '0x',
        bytes_1.default.fromNat(bigIntToHex(value)),
        bytes_1.default.fromNat(utils_1.bufferToHex(dataOrInit)),
        ...extraData,
    ];
    const signingDataHex = rlp.encode(signingData);
    return address_1.Address.fromString(account_1.default.recover(utils_1.sha3(signingDataHex), signature));
}
exports.recoverTransaction = recoverTransaction;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZXZtL3R4L3R4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLGlEQUF1RDtBQUN2RCxpREFBMkI7QUFDM0IsMkNBQXdDO0FBQ3hDLDRFQUE0QztBQUM1Qyx3RUFBd0M7QUFDeEMsdUNBQTZEO0FBYzdELFNBQWdCLFdBQVcsQ0FBQyxFQUFNO0lBQ2hDLE1BQU0sRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztJQUN6RSxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUM7UUFDaEIsMEJBQVUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDO1FBQ3JCLDBCQUFVLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQztRQUN4QiwwQkFBVSxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUM7UUFDeEIsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUU7UUFDaEMsMEJBQVUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDO1FBQ3JCLFVBQVU7UUFDVixtQkFBVyxDQUFDLENBQUMsQ0FBQztRQUNkLG1CQUFXLENBQUMsQ0FBQyxDQUFDO1FBQ2QsbUJBQVcsQ0FBQyxDQUFDLENBQUM7S0FDZixDQUFDLENBQUM7QUFDTCxDQUFDO0FBYkQsa0NBYUM7QUFFRCxTQUFnQixhQUFhLENBQUMsSUFBWTtJQUN4QyxNQUFNLElBQUksR0FBYSxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBUSxDQUFDO0lBQy9DLE9BQU87UUFDTCxLQUFLLEVBQUUsMEJBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUIsUUFBUSxFQUFFLDBCQUFVLENBQUMsSUFBSSxDQUFD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