"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tx_1 = require("../tx/tx");
const contract_creation_1 = require("./contract-creation");
const gas_1 = require("./gas");
const message_call_1 = require("./message-call");
async function executeTransaction(worldState, tx, sender) {
    const { to, dataOrInit, value, gasPrice, gasLimit } = tx;
    sender = sender || tx_1.recoverTransaction(tx);
    await validateTx(worldState, sender, tx);
    worldState.checkpoint();
    const senderAccount = (await worldState.loadAccount(sender));
    senderAccount.nonce++;
    await worldState.commit();
    const result = to
        ? await message_call_1.messageCall(worldState, sender, sender, to, to, value, gasLimit, dataOrInit, 0, true)
        : await contract_creation_1.contractCreation(worldState, sender, sender, gasLimit, gasPrice, value, dataOrInit, 0, true);
    return result;
}
exports.executeTransaction = executeTransaction;
async function validateTx(worldState, sender, tx) {
    const { to, dataOrInit, value, nonce, gasLimit, gasPrice } = tx;
    const senderAccount = await worldState.loadImmutableAccount(sender);
    if (!senderAccount) {
        throw new Error(`Sender account not found: ${sender}`);
    }
    if (senderAccount.nonce !== nonce) {
        throw new Error('Sender account nonce does not match transaction nonce.');
    }
    const intrinsicGas = (dataOrInit && dataOrInit.length ? gas_1.Gas.GTXDATANONZERO : gas_1.Gas.GTXDATANONZERO) +
        (to ? 0 : gas_1.Gas.GTXCREATE) +
        gas_1.Gas.GTRANSACTION;
    if (gasLimit < intrinsicGas) {
        throw new Error(`Gas limit ${gasLimit} is less than intrinsic gas ${intrinsicGas} for this transaction.`);
    }
    const upFrontCost = gasLimit * gasPrice + value;
    if (senderAccount.balance < upFrontCost) {
        throw new Error('Sender account balance below cost of up front payment.');
    }
    // TODO: final condition YP-58.
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhlY3V0ZS10cmFuc2FjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ldm0vdm0vZXhlY3V0ZS10cmFuc2FjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLGlDQUFrRDtBQUdsRCwyREFBdUQ7QUFDdkQsK0JBQTRCO0FBQzVCLGlEQUE2QztBQVV0QyxLQUFLLFVBQVUsa0JBQWtCLENBQUMsVUFBc0IsRUFBRSxFQUFNLEVBQUUsTUFBZ0I7SUFDdkYsTUFBTSxFQUFFLEVBQUUsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLENBQUM7SUFDekQsTUFBTSxHQUFHLE1BQU0sSUFBSSx1QkFBa0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUUxQyxNQUFNLFVBQVUsQ0FBQyxVQUFVLEVBQUUsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBRXpDLFVBQVUsQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUN4QixNQUFNLGFBQWEsR0FBRyxDQUFDLE1BQU0sVUFBVSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBRSxDQUFDO0lBQzlELGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUN0QixNQUFNLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUUxQixNQUFNLE1BQU0sR0FBRyxFQUFFO1FBQ2YsQ0FBQyxDQUFDLE1BQU0sMEJBQVcsQ0FBQyxVQUFVLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUM7UUFDN0YsQ0FBQyxDQUFDLE1BQU0sb0NBQWdCLENBQUMsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUV2RyxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDO0FBaEJELGdEQWdCQztBQUVELEtBQUssVUFBVSxVQUFVLENBQUMsVUFBc0IsRUFBRSxNQUFlLEVBQUUsRUFBTTtJQUN2RSxNQUFNLEVBQUUsRUFBRSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLENBQUM7SUFFaEUsTUFBTSxhQUFhLEdBQUcsTUFBTSxVQUFVLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDcEUsSUFBSSxDQUFDLGFBQWEsRUFBRTtRQUNsQixNQUFNLElBQUksS0FBSyxDQUFDLDZCQUE2QixNQUFNLEVBQUUsQ0FBQyxDQUFDO0tBQ3hEO0lBRUQsSUFBSSxhQUFhLENBQUMsS0FBSyxLQUFLLEtBQUssRUFBRTtRQUNqQyxNQUFNLElBQUksS0FBSyxDQUFDLHdEQUF3RCxDQUFDLENBQUM7S0FDM0U7SUFFRCxNQUFNLFlBQVksR0FDaEIsQ0FBQyxVQUFVLElBQUksVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsU0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsU0FBRyxDQUFDLGNBQWMsQ0FBQztRQUMzRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFHLENBQUMsU0FBUyxDQUFDO1FBQ3hCLFNBQUcsQ0FBQyxZQUFZLENBQUM7SUFDbkIsSUFBSSxRQUFRLEdBQUcsWUFBWSxFQUFFO1FBQzNCLE1BQU0sSUFBSSxLQUFLLENBQUMsYUFBYSxRQUFRLCtCQUErQixZQUFZLHdCQUF3QixDQUFDLENBQUM7S0FDM0c7SUFFRCxNQUFNLFdBQVcsR0FBRyxRQUFRLEdBQUcsUUFBUSxHQUFHLEtBQUssQ0FBQztJQUNoRCxJQUFJLGFBQWEsQ0FBQyxPQUFPLEdBQUcsV0FBVyxFQUFFO1FBQ3ZDLE1BQU0sSUFBSSxLQUFLLENBQUMsd0RBQXdELENBQUMsQ0FBQztLQUMzRTtJQUVELCtCQUErQjtBQUNqQyxDQUFDIn0=