/// <reference types="node" />
import { LevelUp } from 'levelup';
import { Address } from '../../address';
import { Trie } from '../trie';
import { EvmAccount } from './evm-account';
declare type Immutable<T> = {
    readonly [P in keyof T]: T[P];
};
export declare class WorldState {
    db: LevelUp;
    accounts: Trie;
    private checkpoints;
    constructor(db: LevelUp, accounts: Trie);
    static fromDb(db: LevelUp): Promise<WorldState>;
    private installPrecompiledContracts;
    private saveStateRoot;
    getStateRoot(): Promise<any>;
    createAccount(address: Address, value: bigint, nonce?: bigint, code?: Buffer): Promise<EvmAccount>;
    loadOrCreateAccount(address: Address): Promise<EvmAccount>;
    loadImmutableAccount(address: Address): Promise<Immutable<EvmAccount> | undefined>;
    loadAccount(address: Address | bigint): Promise<EvmAccount | undefined>;
    private loadCheckpointAccount;
    private loadPersistedAccount;
    private storeAccount;
    checkpoint(): void;
    commit(): Promise<void>;
    revert(): Promise<void>;
    getTransactionCount(address: Address): Promise<bigint>;
}
export {};
