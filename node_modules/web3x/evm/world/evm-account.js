"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const bigint_buffer_1 = require("bigint-buffer");
const rlp = tslib_1.__importStar(require("rlp"));
const address_1 = require("../../address");
const utils_1 = require("../../utils");
const trie_1 = require("../trie");
const vm_1 = require("../vm");
function EvmAccountFactory(address, nonce, balance, storage, code) {
    switch (address.toString()) {
        case '0x0000000000000000000000000000000000000001':
            return new EvmEcdsaRecoveryAccount(address, nonce, balance, storage, code);
        default:
            return new EvmAccount(address, nonce, balance, storage, code);
    }
}
exports.EvmAccountFactory = EvmAccountFactory;
class EvmAccount {
    constructor(address, nonce, balance, storage, code) {
        this.address = address;
        this.nonce = nonce;
        this.balance = balance;
        this.storage = storage;
        this.code = code;
    }
    nextContractAddress() {
        return new address_1.Address(utils_1.sha3Buffer(rlp.encode([this.address.toBuffer(), bigint_buffer_1.toBufferBE(this.nonce - BigInt(1), 32)])).slice(12));
    }
    async run(context) {
        if (context.code.length === 0) {
            return context;
        }
        return await vm_1.run(context);
    }
    isEmpty() {
        return this.code.length === 0 && this.nonce === BigInt(0) && this.balance === BigInt(0);
    }
}
exports.EvmAccount = EvmAccount;
class EvmEcdsaRecoveryAccount extends EvmAccount {
    constructor(address, nonce, balance, storage, code) {
        super(address, nonce, balance, storage, code);
    }
    static fromDb(db) {
        return new EvmEcdsaRecoveryAccount(address_1.Address.fromString('0x0000000000000000000000000000000000000001'), BigInt(0), BigInt(0), new trie_1.Trie(db), Buffer.of());
    }
    async run(callContext) {
        const { calldata } = callContext;
        const h = calldata.slice(0, 32);
        const v = calldata.slice(32, 64);
        const r = calldata.slice(64, 96);
        const s = calldata.slice(96, 128);
        const result = utils_1.recover(utils_1.bufferToHex(h), utils_1.bufferToHex(v), utils_1.bufferToHex(r), utils_1.bufferToHex(s), true).toBuffer32();
        callContext.halt = true;
        callContext.returned = result;
        return callContext;
    }
}
exports.EvmEcdsaRecoveryAccount = EvmEcdsaRecoveryAccount;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZtLWFjY291bnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZXZtL3dvcmxkL2V2bS1hY2NvdW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLGlEQUEyQztBQUUzQyxpREFBMkI7QUFDM0IsMkNBQXdDO0FBQ3hDLHVDQUE0RTtBQUM1RSxrQ0FBK0I7QUFDL0IsOEJBQXdDO0FBRXhDLFNBQWdCLGlCQUFpQixDQUFDLE9BQWdCLEVBQUUsS0FBYSxFQUFFLE9BQWUsRUFBRSxPQUFhLEVBQUUsSUFBWTtJQUM3RyxRQUFRLE9BQU8sQ0FBQyxRQUFRLEVBQUUsRUFBRTtRQUMxQixLQUFLLDRDQUE0QztZQUMvQyxPQUFPLElBQUksdUJBQXVCLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQzdFO1lBQ0UsT0FBTyxJQUFJLFVBQVUsQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7S0FDakU7QUFDSCxDQUFDO0FBUEQsOENBT0M7QUFFRCxNQUFhLFVBQVU7SUFDckIsWUFDa0IsT0FBZ0IsRUFDekIsS0FBYSxFQUNiLE9BQWUsRUFDTixPQUFhLEVBQ3RCLElBQVk7UUFKSCxZQUFPLEdBQVAsT0FBTyxDQUFTO1FBQ3pCLFVBQUssR0FBTCxLQUFLLENBQVE7UUFDYixZQUFPLEdBQVAsT0FBTyxDQUFRO1FBQ04sWUFBTyxHQUFQLE9BQU8sQ0FBTTtRQUN0QixTQUFJLEdBQUosSUFBSSxDQUFRO0lBQ2xCLENBQUM7SUFFRyxtQkFBbUI7UUFDeEIsT0FBTyxJQUFJLGlCQUFPLENBQ2hCLGtCQUFVLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLEVBQUUsMEJBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQ3BHLENBQUM7SUFDSixDQUFDO0lBRU0sS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFtQjtRQUNsQyxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUM3QixPQUFPLE9BQU8sQ0FBQztTQUNoQjtRQUNELE9BQU8sTUFBTSxRQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUVNLE9BQU87UUFDWixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsT0FBTyxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxRixDQUFDO0NBQ0Y7QUF6QkQsZ0NBeUJDO0FBRUQsTUFBYSx1QkFBd0IsU0FBUSxVQUFVO0lBQ3JELFlBQVksT0FBZ0IsRUFBRSxLQUFhLEVBQUUsT0FBZSxFQUFFLE9BQWEsRUFBRSxJQUFZO1FBQ3ZGLEtBQUssQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDaEQsQ0FBQztJQUVNLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBVztRQUM5QixPQUFPLElBQUksdUJBQXVCLENBQ2hDLGlCQUFPLENBQUMsVUFBVSxDQUFDLDRDQUE0QyxDQUFDLEVBQ2hFLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFDVCxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQ1QsSUFBSSxXQUFJLENBQUMsRUFBRSxDQUFDLEVBQ1osTUFBTSxDQUFDLEVBQUUsRUFBRSxDQUNaLENBQUM7SUFDSixDQUFDO0lBRU0sS0FBSyxDQUFDLEdBQUcsQ0FBQyxXQUF1QjtRQUN0QyxNQUFNLEVBQUUsUUFBUSxFQUFFLEdBQUcsV0FBVyxDQUFDO1FBRWpDLE1BQU0sQ0FBQyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2hDLE1BQU0sQ0FBQyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2pDLE1BQU0sQ0FBQyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2pDLE1BQU0sQ0FBQyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBRWxDLE1BQU0sTUFBTSxHQUFHLGVBQU8sQ0FBQyxtQkFBVyxDQUFDLENBQUMsQ0FBQyxFQUFFLG1CQUFXLENBQUMsQ0FBQyxDQUFDLEVBQUUsbUJBQVcsQ0FBQyxDQUFDLENBQUMsRUFBRSxtQkFBVyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQzFHLFdBQVcsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ3hCLFdBQVcsQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDO1FBRTlCLE9BQU8sV0FBVyxDQUFDO0lBQ3JCLENBQUM7Q0FDRjtBQTdCRCwwREE2QkMifQ==