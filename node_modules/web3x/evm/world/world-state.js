"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bigint_buffer_1 = require("bigint-buffer");
const address_1 = require("../../address");
const utils_1 = require("../../utils");
const trie_1 = require("../trie");
const account_state_1 = require("./account-state");
const evm_account_1 = require("./evm-account");
class WorldState {
    constructor(db, accounts) {
        this.db = db;
        this.accounts = accounts;
        this.checkpoints = [];
    }
    static async fromDb(db) {
        const getStateRoot = async () => {
            try {
                return await db.get(Buffer.from('stateRoot'));
            }
            catch (err) {
                return null;
            }
        };
        const stateRoot = await getStateRoot();
        const trie = new trie_1.Trie(db, stateRoot);
        const worldState = new WorldState(db, trie);
        if (!stateRoot) {
            await worldState.installPrecompiledContracts();
        }
        return worldState;
    }
    async installPrecompiledContracts() {
        const ecdsaRecovery = evm_account_1.EvmEcdsaRecoveryAccount.fromDb(this.accounts.db);
        await this.storeAccount(ecdsaRecovery);
        await this.saveStateRoot();
    }
    async saveStateRoot() {
        await this.db.put(Buffer.from('stateRoot'), this.accounts.root);
    }
    async getStateRoot() {
        try {
            return await this.db.get(Buffer.from('stateRoot'));
        }
        catch (err) {
            return null;
        }
    }
    async createAccount(address, value, nonce = BigInt(0), code = Buffer.of()) {
        if (this.checkpoints.length === 0) {
            throw new Error('You must checkpoint before potentially modifying state.');
        }
        const existingAccount = await this.loadImmutableAccount(address);
        if (existingAccount) {
            throw new Error('Account already exists.');
        }
        const storage = new trie_1.Trie(this.accounts.db);
        storage.checkpoint();
        const account = new evm_account_1.EvmAccount(address, nonce, value, storage, code);
        this.checkpoints[0][address.toString()] = account;
        return account;
    }
    async loadOrCreateAccount(address) {
        return (await this.loadAccount(address)) || (await this.createAccount(address, BigInt(0)));
    }
    async loadImmutableAccount(address) {
        const account = (await this.loadCheckpointAccount(address)) || (await this.loadPersistedAccount(address));
        return account;
    }
    async loadAccount(address) {
        if (this.checkpoints.length === 0) {
            throw new Error('You must checkpoint before potentially modifying state.');
        }
        address = address instanceof address_1.Address ? address : new address_1.Address(bigint_buffer_1.toBufferBE(address, 20));
        const account = (await this.loadCheckpointAccount(address)) || (await this.loadPersistedAccount(address));
        if (!account) {
            return;
        }
        if (!this.checkpoints[0][address.toString()]) {
            account.storage.checkpoint();
            this.checkpoints[0][address.toString()] = account;
        }
        return account;
    }
    loadCheckpointAccount(address) {
        const addrStr = address.toString();
        const index = this.checkpoints.findIndex(cp => !!cp[addrStr]);
        if (index < 0) {
            return;
        }
        if (index > 0) {
            const { nonce, balance, storage, code } = this.checkpoints[index][addrStr];
            return new evm_account_1.EvmAccount(address, nonce, balance, storage, code);
        }
        return this.checkpoints[0][addrStr];
    }
    async loadPersistedAccount(address) {
        const fromAccountRlp = await this.accounts.get(address.toBuffer());
        if (!fromAccountRlp) {
            return;
        }
        const state = account_state_1.AccountState.fromRlp(fromAccountRlp);
        const storage = new trie_1.Trie(this.accounts.db, state.storageRoot);
        const code = (await storage.get(state.codeHash)) || Buffer.of();
        const account = evm_account_1.EvmAccountFactory(address, state.nonce, state.balance, storage, code);
        return account;
    }
    async storeAccount(account) {
        const codeHash = utils_1.sha3Buffer(account.code);
        await account.storage.put(codeHash, account.code);
        const state = new account_state_1.AccountState(account.nonce, account.balance, account.storage.root, codeHash);
        await this.accounts.put(account.address.toBuffer(), state.toRlp());
    }
    checkpoint() {
        this.accounts.checkpoint();
        this.checkpoints.unshift([]);
    }
    async commit() {
        if (this.checkpoints.length === 0) {
            throw new Error('No checkpoint to commit.');
        }
        else if (this.checkpoints.length === 1) {
            await Promise.all(Object.entries(this.checkpoints[0]).map(([, account]) => this.storeAccount(account)));
            await Promise.all(Object.entries(this.checkpoints[0]).map(([, account]) => account.storage.commit()));
            await this.accounts.commit();
            await this.saveStateRoot();
        }
        else {
            await Promise.all(Object.entries(this.checkpoints[0]).map(async ([addr, account]) => {
                if (this.checkpoints[1][addr]) {
                    await account.storage.commit();
                }
                this.checkpoints[1][addr] = account;
            }));
            await this.accounts.commit();
        }
        this.checkpoints.shift();
    }
    async revert() {
        if (this.checkpoints.length === 0) {
            throw new Error('No checkpoint to revert.');
        }
        Object.entries(this.checkpoints[0]).map(([, account]) => account.storage.revert());
        this.checkpoints.shift();
    }
    async getTransactionCount(address) {
        const account = await this.loadImmutableAccount(address);
        return account ? account.nonce : BigInt(0);
    }
}
exports.WorldState = WorldState;
//# sourceMappingURL=data:application/json;base64,