"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const bn_js_1 = tslib_1.__importDefault(require("bn.js"));
const events_1 = require("events");
const rlp = tslib_1.__importStar(require("rlp"));
const address_1 = require("../../address");
const utils_1 = require("../../utils");
const trie_1 = require("../trie");
const tx_1 = require("../tx/tx");
const tx_receipt_1 = require("../tx/tx-receipt");
function serializeBlockHeader(blockHeader) {
    return rlp.encode([
        blockHeader.parentHash,
        blockHeader.stateRoot,
        blockHeader.transactionsRoot,
        blockHeader.receiptsRoot,
        blockHeader.number,
    ]);
}
exports.serializeBlockHeader = serializeBlockHeader;
function deserializeBlockHeader(data) {
    const bufs = rlp.decode(data);
    return {
        parentHash: bufs[0],
        sha3Uncles: Buffer.of(),
        miner: address_1.Address.ZERO,
        stateRoot: bufs[1],
        transactionsRoot: bufs[2],
        receiptsRoot: bufs[3],
        logsBloom: Buffer.of(),
        difficulty: BigInt(0),
        number: new bn_js_1.default(bufs[4]).toNumber(),
        gasLimit: BigInt(0),
        gasUsed: BigInt(0),
        timestamp: new Date().getTime(),
        extraData: Buffer.of(),
        mixHash: Buffer.of(),
        nonce: 0,
    };
}
exports.deserializeBlockHeader = deserializeBlockHeader;
class Blockchain extends events_1.EventEmitter {
    constructor(db, blocks) {
        super();
        this.db = db;
        this.blocks = blocks;
    }
    static async fromDb(db) {
        const getChainTip = async () => {
            try {
                return await db.get(Buffer.from('chainTip'));
            }
            catch (err) {
                return null;
            }
        };
        let blockHash = await getChainTip();
        const blocks = [];
        if (blockHash) {
            while (true) {
                const block = deserializeBlockHeader(await db.get(blockHash));
                blocks.unshift(block);
                if (block.parentHash.length === 0) {
                    break;
                }
                blockHash = block.parentHash;
            }
        }
        return new Blockchain(db, blocks);
    }
    async mineTransactions(stateRoot, txs, txReceipts) {
        const parentBlock = this.blocks.length > 0 ? this.blocks[this.blocks.length - 1] : undefined;
        const blockNumber = parentBlock ? parentBlock.number + 1 : 0;
        const serializedTxs = txs.map(tx_1.serializeTx);
        const txHashes = serializedTxs.map(utils_1.sha3Buffer);
        const receiptTrie = new trie_1.Trie(this.db);
        txReceipts.forEach((receipt, i) => receiptTrie.put(utils_1.sha3Buffer(i.toString()), tx_receipt_1.serializeTxReceipt(receipt)));
        const txTrie = new trie_1.Trie(this.db);
        serializedTxs.forEach((tx, i) => txTrie.put(utils_1.sha3Buffer(i.toString()), tx));
        const block = {
            parentHash: parentBlock ? utils_1.sha3Buffer(serializeBlockHeader(parentBlock)) : Buffer.of(),
            sha3Uncles: Buffer.of(),
            miner: address_1.Address.ZERO,
            stateRoot,
            transactionsRoot: txTrie.root,
            receiptsRoot: receiptTrie.root,
            logsBloom: Buffer.of(),
            difficulty: BigInt(0),
            number: blockNumber,
            gasLimit: BigInt(0),
            gasUsed: BigInt(0),
            timestamp: new Date().getTime(),
            extraData: Buffer.of(),
            mixHash: Buffer.of(),
            nonce: 0,
        };
        this.blocks.push(block);
        // Add block to db.
        const serializedBlock = serializeBlockHeader(block);
        const blockHash = utils_1.sha3Buffer(serializedBlock);
        await this.db.put(blockHash, serializedBlock);
        // Record new chaintip.
        await this.db.put(Buffer.from('chainTip'), blockHash);
        // Add lookup for transactions. txHash => [blockHash, txIndex].
        await Promise.all(txHashes.map((txHash, i) => this.db.put(txHash, rlp.encode([blockHash, utils_1.sha3Buffer(i.toString())]))));
        this.emit('newHeads', block, blockHash);
        txReceipts.forEach((receipt, transactionIndex) => {
            const transactionHash = txHashes[transactionIndex];
            const result = {
                blockHash: utils_1.bufferToHex(blockHash),
                blockNumber,
                transactionIndex,
                transactionHash: utils_1.bufferToHex(transactionHash),
            };
            receipt.logs.forEach(({ data, address, topics }, logIndex) => {
                this.emit('logs', { ...result, logIndex, data: utils_1.bufferToHex(data), address, topics: topics.map(utils_1.bufferToHex) });
            });
        });
        return txHashes;
    }
    async getMinedTransaction(txHash) {
        const lookup = rlp.decode(await this.db.get(txHash));
        const blockHeader = deserializeBlockHeader(await this.db.get(lookup[0]));
        const txTrie = new trie_1.Trie(this.db, blockHeader.transactionsRoot);
        return tx_1.deserializeTx(await txTrie.get(lookup[1]));
    }
    async getTransactionReceipt(txHash) {
        try {
            const lookup = rlp.decode(await this.db.get(txHash));
            const blockHeader = deserializeBlockHeader(await this.db.get(lookup[0]));
            const receiptTrie = new trie_1.Trie(this.db, blockHeader.receiptsRoot);
            return tx_receipt_1.deserializeTxReceipt(await receiptTrie.get(lookup[1]));
        }
        catch (err) {
            return null;
        }
    }
    async indexKeyedTrieToArray(trie) {
        const result = [];
        for (let i = 0; true; i++) {
            const data = await trie.get(utils_1.sha3Buffer(i.toString()));
            if (!data) {
                return result;
            }
            result.push(data);
        }
    }
    async getLogs(addresses, topics, fromBlock, toBlock) {
        if (fromBlock < 0 ||
            fromBlock > this.blocks.length - 1 ||
            toBlock < 0 ||
            toBlock > this.blocks.length - 1 ||
            toBlock < fromBlock) {
            throw new Error('Bad fromBlock toBlock range.');
        }
        const blocks = this.blocks.slice(fromBlock, toBlock + 1);
        // TODO: Filter for blocks with appropriate logsBloom.
        const logs = [];
        for (const block of blocks) {
            const blockHash = utils_1.sha3Buffer(serializeBlockHeader(block));
            const receiptTrie = new trie_1.Trie(this.db, block.receiptsRoot);
            const receipts = (await this.indexKeyedTrieToArray(receiptTrie)).map(tx_receipt_1.deserializeTxReceipt);
            for (const [transactionIndex, receipt] of receipts.entries()) {
                /* TODO: Skip receipts that don't match filter.
                if (receipt.logsBloomFilter != topics) {
                  continue;
                }
                */
                const txTrie = new trie_1.Trie(this.db, block.transactionsRoot);
                const txData = await txTrie.get(utils_1.sha3Buffer(transactionIndex.toString()));
                const transactionHash = utils_1.sha3Buffer(txData);
                // Add another filter before map to only push topics of interest.
                logs.push(...receipt.logs
                    .filter(log => addresses.some(a => a.equals(log.address)))
                    .filter(log => topicsMatch(log.topics, topics))
                    .map(log => ({ block, blockHash, log, transactionIndex, transactionHash })));
            }
        }
        return logs;
    }
    getChaintip() {
        return this.blocks[this.blocks.length - 1];
    }
}
exports.Blockchain = Blockchain;
function topicsMatch(logTopics, topics) {
    return logTopics.every((logTopic, index) => {
        const topic = topics[index];
        return topic === null ? true : topic.some(topicMatcher => topicMatcher.equals(logTopic));
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZXZtL2Jsb2NrY2hhaW4vaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsMERBQXVCO0FBQ3ZCLG1DQUFzQztBQUV0QyxpREFBMkI7QUFDM0IsMkNBQXdDO0FBQ3hDLHVDQUFzRDtBQUN0RCxrQ0FBK0I7QUFFL0IsaUNBQTBEO0FBQzFELGlEQUF1RjtBQWtDdkYsU0FBZ0Isb0JBQW9CLENBQUMsV0FBd0I7SUFDM0QsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDO1FBQ2hCLFdBQVcsQ0FBQyxVQUFVO1FBQ3RCLFdBQVcsQ0FBQyxTQUFTO1FBQ3JCLFdBQVcsQ0FBQyxnQkFBZ0I7UUFDNUIsV0FBVyxDQUFDLFlBQVk7UUFDeEIsV0FBVyxDQUFDLE1BQU07S0FDbkIsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQVJELG9EQVFDO0FBRUQsU0FBZ0Isc0JBQXNCLENBQUMsSUFBWTtJQUNqRCxNQUFNLElBQUksR0FBYSxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBUSxDQUFDO0lBQy9DLE9BQU87UUFDTCxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNuQixVQUFVLEVBQUUsTUFBTSxDQUFDLEVBQUUsRUFBRTtRQUN2QixLQUFLLEVBQUUsaUJBQU8sQ0FBQyxJQUFJO1FBQ25CLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ2xCLGdCQUFnQixFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDekIsWUFBWSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDckIsU0FBUyxFQUFFLE1BQU0sQ0FBQyxFQUFFLEVBQUU7UUFDdEIsVUFBVSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDckIsTUFBTSxFQUFFLElBQUksZUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRTtRQUNsQyxRQUFRLEVBQUUs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