/// <reference types="node" />
import { EventEmitter } from 'events';
import { LevelUp } from 'levelup';
import { Address } from '../../address';
import { Log } from '../tx';
import { Tx } from '../tx/tx';
import { TxReceipt } from '../tx/tx-receipt';
export interface BlockHeader {
    parentHash: Buffer;
    sha3Uncles: Buffer;
    miner: Address;
    stateRoot: Buffer;
    transactionsRoot: Buffer;
    receiptsRoot: Buffer;
    logsBloom: Buffer;
    difficulty: bigint;
    number: number;
    gasLimit: bigint;
    gasUsed: bigint;
    timestamp: number;
    extraData: Buffer;
    mixHash: Buffer;
    nonce: number;
}
export interface BlockState {
    header: BlockHeader;
    uncles: BlockHeader[];
    transactions: Tx[];
}
export declare type GetLogsResult = {
    block: BlockHeader;
    blockHash: Buffer;
    transactionIndex: number;
    transactionHash: Buffer;
    log: Log;
}[];
export declare function serializeBlockHeader(blockHeader: BlockHeader): Buffer;
export declare function deserializeBlockHeader(data: Buffer): BlockHeader;
export declare class Blockchain extends EventEmitter {
    db: LevelUp;
    private blocks;
    constructor(db: LevelUp, blocks: BlockHeader[]);
    static fromDb(db: LevelUp): Promise<Blockchain>;
    mineTransactions(stateRoot: Buffer, txs: Tx[], txReceipts: TxReceipt[]): Promise<Buffer[]>;
    getMinedTransaction(txHash: Buffer): Promise<Tx>;
    getTransactionReceipt(txHash: Buffer): Promise<TxReceipt | null>;
    private indexKeyedTrieToArray;
    getLogs(addresses: Address[], topics: (Buffer[] | null)[], fromBlock: number, toBlock: number): Promise<{
        block: BlockHeader;
        blockHash: Buffer;
        transactionIndex: number;
        transactionHash: Buffer;
        log: Log;
    }[]>;
    getChaintip(): BlockHeader;
}
